import{_ as s,o as e,c as a,Q as t}from"./chunks/framework.d75cc149.js";const f=JSON.parse('{"title":"@supports","description":"@supports 又被称为「feature query」, 当你想使用新的css能力而不确定浏览器是否支持时，用它就对了。","frontmatter":{"description":"@supports 又被称为「feature query」, 当你想使用新的css能力而不确定浏览器是否支持时，用它就对了。"},"headers":[],"relativePath":"css-ji-chu/rules/supports.md","filePath":"css-ji-chu/rules/supports.md"}'),r={name:"css-ji-chu/rules/supports.md"},o=t('<h1 id="supports" tabindex="-1">@supports <a class="header-anchor" href="#supports" aria-label="Permalink to &quot;@supports&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>@supports 可以判断指定的 css 在当前浏览器是否支持，如果支持，浏览器会应用其内部指定的样式代码，如果不支持，则会忽略。</p><h2 id="如何使用" tabindex="-1">如何使用 <a class="header-anchor" href="#如何使用" aria-label="Permalink to &quot;如何使用&quot;">​</a></h2><h3 id="明确指定-css" tabindex="-1">明确指定 css <a class="header-anchor" href="#明确指定-css" aria-label="Permalink to &quot;明确指定 css&quot;">​</a></h3><p>比如想要使用 flex，但不确定浏览器是否支持，可以这样实现</p>',6),c=[o];function p(u,i,n,h,l,_){return e(),a("div",null,c)}const m=s(r,[["render",p]]);export{f as __pageData,m as default};
